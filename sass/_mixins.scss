/* ------------------------
 Mixins
------------------------ */

@mixin clear {
  content: '';
  display: block;
  clear: both;
}


// set in pixels or ems
@mixin blur($amount) {
  -webkit-filter: blur($amount);
   -moz-filter: blur($amount);
    -o-filter: blur($amount);
     -ms-filter: blur($amount);
      filter: blur($amount);
}

@mixin blur($amt) {
  -webkit-filter: blur($amt);
   filter: blur($amt);
}

@mixin box-shadow ($type, $vert, $horiz, $blur, $color) {
  -webkit-box-shadow: $type $vert $horiz $blur $color;
   box-shadow: $type $vert $horiz $blur $color;
}

@mixin simple-box-shadow ($vert, $horiz, $blur, $color) {
  -webkit-box-shadow: $vert $horiz $blur $color;
   box-shadow: $vert $horiz $blur $color;
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') { @content; }
  @include optional-at-root(':-moz-placeholder') { @content; }
  @include optional-at-root('::-moz-placeholder') { @content; }
  @include optional-at-root(':-ms-input-placeholder') { @content; }
}

@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	 -moz-transition: $transition-property $transition-time $method;
	  -ms-transition: $transition-property $transition-time $method;
	   -o-transition: $transition-property $transition-time $method;
	    transition: $transition-property $transition-time $method;
}

@mixin border-radius ($rad) {
  border-radius: ($rad);
}

@mixin border-radius-corners ($nw, $ne, $se, $sw) {
  border-radius: ($nw $ne $se $sw);
}

@mixin translate($horiz,$vert) {
	-webkit-transform: translate($horiz,$vert);
	 -moz-transform: translate($horiz,$vert);
	  -ms-transform: translate($horiz,$vert);
	   -o-transform: translate($horiz,$vert);
	   transform: translate($horiz,$vert);
}

@mixin translatey {
  -webkit-transform: translateY(-50%);
	 -moz-transform: translateY(-50%);
	  -ms-transform: translateY(-50%);
	   -o-transform: translateY(-50%);
	   transform: translateY(-50%);
}

@mixin -vertical-middle {
  @include translatey;
  position: relative;
   top: 50%;
}

@mixin opacity($opac) {
	opacity: $opac;
   filter: alpha(opacity= $opac * 100 ); /* For IE8 and earlier */
}

/*
@mixin translatey($y) {
	-webkit-transform: translateY($y);
	 -ms-transform: translateY($y);
	  transform: translateY($y);
} */

// $rotate and $skew with deg, a la "90deg"
@mixin transform($rotate, $scale, $skew, $translatex, $translatey) {
  transform: rotate($rotate) scale($scale) skew($skew) translateX($translatex) translateY($translatey);
   -webkit-transform: rotate($rotate) scale($scale) skew($skew) translateX($translatex) translateY($translatey);
    -moz-transform: rotate($rotate) scale($scale) skew($skew) translateX($translatex) translateY($translatey);
     -o-transform: rotate($rotate) scale($scale) skew($skew) translateX($translatex) translateY($translatey);
      -ms-transform: rotate($rotate) scale($scale) skew($skew) translateX($translatex) translateY($translatey);
}

@mixin hover {
  &:hover{ @content; }
	 &:active{ @content; }
	  &:focus{ @content; }
	   &:target{ @content; }
}

/*
@mixin linear-gradient ($colora, $stopa, $colorb, $stopb) {
  background-image: -webkit-gradient(
   linear,
   right top,
   left top,
   color-stop($stopa * .01, $colora),
   color-stop($stopb * .01, $colorb)
  );
  background-image: -o-linear-gradient(left, $colora $stopa%, $colorb $stopb%);
  background-image: -moz-linear-gradient(left, $colora $stopa%, $colorb $stopb%);
  background-image: -webkit-linear-gradient(left, $colora $stopa%, $colorb $stopb%);
  background-image: -ms-linear-gradient(left, $colora $stopa%, $colorb $stopb%);
  background-image: linear-gradient(left, $colora $stopa%, $colorb $stopb%);
} */



@mixin lineargradient($colora, $colorb) {
  background-image: -webkit-gradient(
   linear,
   right top,
   left top,
   color-stop(.5,$colora),
   color-stop(1,$colorb)
  );
  background-image: -o-linear-gradient(top, $colora 50%, $colorb 100%);
  background-image: -moz-linear-gradient(top, $colora 50%, $colorb 100%);
  background-image: -webkit-linear-gradient(top, $colora 50%, $colorb 100%);
  background-image: -ms-linear-gradient(top, $colora 50%, $colorb 100%);
  background-image: linear-gradient(top, $colora 50%, $colorb 100%);
}







// Animations are a three part thing
// this is Part One

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

// Timing: linear;  duration in s
@mixin cssanimate($animation, $timing, $iterations, $duration) {
  -webkit-animation-name: $animation;
  -webkit-animation-timing-function: $timing;
  -webkit-animation-iteration-count: $iterations;
  -webkit-animation-duration: $duration;

  animation-name: $animation;
  animation-timing-function: $timing;
  animation-iteration-count: $iterations;
  animation-duration: $duration;
}


// Part Two: name and define the animation

/* @include keyframes(NAME) {
    50% { transform: scale(1.2); transform-origin: center center; }
    0%, 100% { transform: scale(1); transform-origin: center center; }
} */


@include keyframes(delayedrise) {
  0%, 80% { height: 2.6em; }
  100% { height: 0; }
}

@include keyframes(logrow) {
    50% { transform: scale(1.2); transform-origin: center center; }
    0%, 100% { transform: scale(1); transform-origin: center center; }
}



// Part Three: apply it in SCSS file a la

// @include cssanimate(logrow, none, 1, .5s);

/*
#animated-div {

  -webkit-animation-name: NAME;
  -webkit-animation-timing-function: linear;
  -webkit-animation-iteration-count: 1;
  -webkit-animation-duration: 4s;

  animation-name: NAME;
  animation-timing-function: linear;
  animation-iteration-count: 1;
  animation-duration: 4s;

}
*/
